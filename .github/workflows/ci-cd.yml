name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  DOCKER_IMAGE_NAME: fiap-projeto-games-api

jobs:
  # Job de Build e Testes
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --verbosity normal --configuration Release

    - name: Run code coverage
      run: |
        dotnet tool install --global coverlet.collector
        dotnet test --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/**/coverage.info
        flags: unittests
        name: codecov-umbrella

  # Job de An√°lise de C√≥digo
  code-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install SonarCloud scanner
      run: |
        dotnet tool install --global dotnet-sonarscanner

    - name: SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet-sonarscanner begin /k:"fiap-projeto-games" /o:"fiap" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        dotnet build --configuration Release
        dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  # Job de Build Docker
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-analysis]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de Deploy para Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aqui voc√™ pode adicionar comandos espec√≠ficos para seu ambiente de staging
        # Por exemplo, kubectl apply, azure cli, aws cli, etc.

  # Job de Deploy para Produ√ß√£o
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Aqui voc√™ pode adicionar comandos espec√≠ficos para seu ambiente de produ√ß√£o
        # Por exemplo, kubectl apply, azure cli, aws cli, etc.

  # Job de Deploy para Railway (Gratuito)
  deploy-railway:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to Railway
      run: |
        echo "üöÄ Deploy autom√°tico via Railway"
        echo "‚úÖ A aplica√ß√£o ser√° deployada automaticamente"
        echo "üåê URL: https://fiap-games.railway.app"
        echo "üìä Monitoramento: https://railway.app/dashboard"

  # Job de Notifica√ß√£o
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ Pipeline completed successfully!"
        # Aqui voc√™ pode adicionar notifica√ß√µes (Slack, Teams, Email, etc.)

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Pipeline failed!"
        # Aqui voc√™ pode adicionar notifica√ß√µes de erro 